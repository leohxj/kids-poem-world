---
import { getCollection } from 'astro:content';
import type { CollectionEntry } from 'astro:content';
import PoemContent from '../../components/PoemContent.astro';
import BaseLayout from '../../layouts/BaseLayout.astro';

export async function getStaticPaths() {
  const poems = await getCollection('poems');
  return poems.map(poem => ({
    params: { slug: poem.id},
    props: { poem },
  }));
}

const { poem } = Astro.props;
const rawContent = await poem.body;

// 获取所有诗歌
const allPoems = await getCollection('poems');

// 获取推荐诗歌
function getRecommendedPoems(currentPoem: CollectionEntry<"poems">, allPoems: CollectionEntry<"poems">[]) {
  const recommendations = new Set<CollectionEntry<"poems">>();

  // 1. 同作者的诗
  const sameAuthorPoems = allPoems.filter(p =>
    p.data.author === currentPoem.data.author &&
    p.id !== currentPoem.id
  );

  // 2. 同朝代的诗
  const sameDynastyPoems = allPoems.filter(p =>
    p.data.dynasty === currentPoem.data.dynasty &&
    p.id !== currentPoem.id &&
    p.data.author !== currentPoem.data.author
  );

  // 添加推荐
  if (sameAuthorPoems.length > 0) {
    recommendations.add(sameAuthorPoems[Math.floor(Math.random() * sameAuthorPoems.length)]);
  }

  while (recommendations.size < 3 && sameDynastyPoems.length > 0) {
    const randomPoem = sameDynastyPoems[Math.floor(Math.random() * sameDynastyPoems.length)];
    recommendations.add(randomPoem);
  }

  return Array.from(recommendations).slice(0, 3);
}

const recommendedPoems = getRecommendedPoems(poem, allPoems);
---

<BaseLayout title={poem.data.title} description={poem.data.description}>
  <div class="max-w-4xl mx-auto px-4">
    <div class="bg-white/90 backdrop-blur-sm rounded-2xl shadow-sm overflow-hidden border border-gray-100">
      <!-- 诗歌标题区域 -->
      <div class="bg-gradient-to-b from-blue-50 to-white px-8 py-12 text-center">
        <h1 class="text-3xl md:text-4xl font-bold text-gray-900 mb-4">
          {poem.data.title}
        </h1>
        <div class="text-gray-600">
          <span class="mx-2">{poem.data.dynasty}</span>
          <span class="mx-2">·</span>
          <span class="mx-2">{poem.data.author}</span>
        </div>
      </div>

      <!-- 诗歌内容区域 -->
      <div class="px-8 py-12">
        <div class="prose prose-lg mx-auto prose-p:my-0">
          <PoemContent content={rawContent} />

          {poem.data.description && (
            <div class="mt-16 pt-8 border-t border-gray-100">
              <h2 class="text-xl font-bold text-gray-900 mb-4">注释赏析</h2>
              <p class="text-gray-600">{poem.data.description}</p>
            </div>
          )}
        </div>
      </div>
    </div>

    <!-- 替换原来的随机推荐部分，添加新的推荐部分 -->
    <div class="max-w-4xl mx-auto px-4 py-8">
      <h2 class="text-2xl font-bold mb-6 text-gray-900">推荐阅读</h2>
      <div class="grid grid-cols-1 md:grid-cols-3 gap-6">
        {recommendedPoems.map((recommendedPoem) => (
          <a
            href={`/poems/${recommendedPoem.id}`}
            class="block p-6 bg-white rounded-lg shadow hover:shadow-md transition-shadow"
          >
            <h3 class="font-medium text-lg text-gray-900 mb-2">
              {recommendedPoem.data.title}
            </h3>
            <p class="text-sm text-gray-600 mb-2">
              {recommendedPoem.data.author} · {recommendedPoem.data.dynasty}
            </p>
            {recommendedPoem.data.description && (
              <p class="text-sm text-gray-500 line-clamp-2">
                {recommendedPoem.data.description}
              </p>
            )}
          </a>
        ))}
      </div>
    </div>
  </div>
</BaseLayout>
